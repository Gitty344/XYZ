
********1 Write C or C++ program to represent binary tree or BST using array and linked list******

#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the BST
struct Node* insertNode(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else if (value > root->data) {
        root->right = insertNode(root->right, value);
    }
    return root;
}

// Function to create BST using array
struct Node* createBSTFromArray(int arr[], int size) {
    struct Node* root = NULL;
    for (int i = 0; i < size; i++) {
        root = insertNode(root, arr[i]);
    }
    return root;
}

// Function to print inorder traversal of BST
void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

int main() {
    int n;
    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    
    struct Node* rootFromArray = createBSTFromArray(arr, n);
    printf("Inorder traversal of BST created from array: ");
    inorderTraversal(rootFromArray);
    printf("\n");

    // Creating BST using linked list and inserting nodes based on user input
    struct Node* rootFromList = NULL;
    printf("Enter the number of elements you want to insert into the BST: ");
    scanf("%d", &n);
    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        rootFromList = insertNode(rootFromList, value);
    }
    printf("Inorder traversal of BST created from user input: ");
    inorderTraversal(rootFromList);
    printf("\n");

    return 0;
}


**********2 Write C or C++ program to implement  recursive tree traversal (inorder, preorder and post order)***********

#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the BST
struct Node* insertNode(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else if (value > root->data) {
        root->right = insertNode(root->right, value);
    }
    return root;
}

// Function for inorder traversal
void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Function for preorder traversal
void preorderTraversal(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}

// Function for postorder traversal
void postorderTraversal(struct Node* root) {
    if (root != NULL) {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    int n;
    printf("Enter the number of elements you want to insert into the BST: ");
    scanf("%d", &n);

    struct Node* root = NULL;

    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        root = insertNode(root, value);
    }

    printf("Inorder traversal: ");
    inorderTraversal(root);
    printf("\n");

    printf("Preorder traversal: ");
    preorderTraversal(root);
    printf("\n");

    printf("Postorder traversal: ");
    postorderTraversal(root);
    printf("\n");

    return 0;
}


***************3 Write C or C++ program to demonstrate various tree operations (count number of nodes, leaf nodes, printing leaf nodes, height of tree, mirror image of the tree)****

#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the binary search tree
struct Node* insertNode(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else if (value > root->data) {
        root->right = insertNode(root->right, value);
    }
    return root;
}

// Function to count the number of nodes in the tree
int countNodes(struct Node* root) {
    if (root == NULL) {
        return 0;
    }
    return 1 + countNodes(root->left) + countNodes(root->right);
}

// Function to count the number of leaf nodes in the tree
int countLeafNodes(struct Node* root) {
    if (root == NULL) {
        return 0;
    }
    if (root->left == NULL && root->right == NULL) {
        return 1;
    }
    return countLeafNodes(root->left) + countLeafNodes(root->right);
}

// Function to print the leaf nodes of the tree
void printLeafNodes(struct Node* root) {
    if (root == NULL) {
        return;
    }
    if (root->left == NULL && root->right == NULL) {
        printf("%d ", root->data);
    }
    printLeafNodes(root->left);
    printLeafNodes(root->right);
}

// Function to calculate the height of the tree
int heightOfTree(struct Node* root) {
    if (root == NULL) {
        return -1;
    }
    int leftHeight = heightOfTree(root->left);
    int rightHeight = heightOfTree(root->right);
    return 1 + (leftHeight > rightHeight ? leftHeight : rightHeight);
}

// Function to swap left and right subtrees (mirror image)
void mirrorTree(struct Node* root) {
    if (root == NULL) {
        return;
    }
    struct Node* temp = root->left;
    root->left = root->right;
    root->right = temp;
    mirrorTree(root->left);
    mirrorTree(root->right);
}

// Function to deallocate memory of the tree
void freeTree(struct Node* root) {
    if (root == NULL) {
        return;
    }
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

int main() {
    int n;
    printf("Enter the number of elements you want to insert into the BST: ");
    scanf("%d", &n);

    struct Node* root = NULL;

    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        root = insertNode(root, value);
    }

    printf("Number of nodes in the tree: %d\n", countNodes(root));
    printf("Number of leaf nodes in the tree: %d\n", countLeafNodes(root));
    printf("Leaf nodes of the tree: ");
    printLeafNodes(root);
    printf("\n");
    printf("Height of the tree: %d\n", heightOfTree(root));

    // Creating mirror image of the tree
    mirrorTree(root);
    printf("Mirror image of the tree created.\n");

    // Freeing memory
    freeTree(root);

    return 0;
}

**********************4 Write C or C++ program to implement  non-recursive tree traversal (inorder, preorder and post order)*************************

#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Define a stack structure for traversal
struct StackNode {
    struct Node* node;
    struct StackNode* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to push a node onto the stack
void push(struct StackNode** top, struct Node* node) {
    struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    newNode->node = node;
    newNode->next = *top;
    *top = newNode;
}

// Function to pop a node from the stack
struct Node* pop(struct StackNode** top) {
    if (*top == NULL) {
        return NULL;
    }
    struct Node* poppedNode = (*top)->node;
    struct StackNode* temp = *top;
    *top = (*top)->next;
    free(temp);
    return poppedNode;
}

// Function to check if the stack is empty
int isEmpty(struct StackNode* top) {
    return top == NULL;
}

// Function for inorder traversal (non-recursive)
void inorderTraversal(struct Node* root) {
    struct StackNode* stack = NULL;
    struct Node* current = root;

    while (current != NULL || !isEmpty(stack)) {
        while (current != NULL) {
            push(&stack, current);
            current = current->left;
        }
        current = pop(&stack);
        printf("%d ", current->data);
        current = current->right;
    }
}

// Function for preorder traversal (non-recursive)
void preorderTraversal(struct Node* root) {
    if (root == NULL) {
        return;
    }
    struct StackNode* stack = NULL;
    push(&stack, root);

    while (!isEmpty(stack)) {
        struct Node* current = pop(&stack);
        printf("%d ", current->data);
        if (current->right != NULL) {
            push(&stack, current->right);
        }
        if (current->left != NULL) {
            push(&stack, current->left);
        }
    }
}

// Function for postorder traversal (non-recursive)
void postorderTraversal(struct Node* root) {
    if (root == NULL) {
        return;
    }
    struct StackNode* stack1 = NULL;
    struct StackNode* stack2 = NULL;
    push(&stack1, root);

    while (!isEmpty(stack1)) {
        struct Node* current = pop(&stack1);
        push(&stack2, current);

        if (current->left != NULL) {
            push(&stack1, current->left);
        }
        if (current->right != NULL) {
            push(&stack1, current->right);
        }
    }

    while (!isEmpty(stack2)) {
        printf("%d ", pop(&stack2)->data);
    }
}

int main() {
    int n;
    printf("Enter the number of elements you want to insert into the BST: ");
    scanf("%d", &n);

    struct Node* root = NULL;

    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        root = createNode(value);
    }

    printf("Inorder traversal (non-recursive): ");
    inorderTraversal(root);
    printf("\n");

    printf("Preorder traversal (non-recursive): ");
    preorderTraversal(root);
    printf("\n");

    printf("Postorder traversal (non-recursive): ");
    postorderTraversal(root);
    printf("\n");

    return 0;
}

*****************5 Write C/C++ program to check whether the tree is balanced or not and tree is AVL or not. Also your code should tell which rotation case is required if tree is imbalanced. show all rotations cases. input should be user choice.

#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to find the height of a tree
int height(struct Node* root) {
    if (root == NULL) {
        return 0;
    }
    int leftHeight = height(root->left);
    int rightHeight = height(root->right);
    return (leftHeight > rightHeight ? leftHeight : rightHeight) + 1;
}

// Function to check if a tree is balanced
int isBalanced(struct Node* root) {
    if (root == NULL) {
        return 1;
    }
    int leftHeight = height(root->left);
    int rightHeight = height(root->right);
    if (abs(leftHeight - rightHeight) <= 1 && isBalanced(root->left) && isBalanced(root->right)) {
        return 1;
    }
    return 0;
}

// Function to check if a tree is AVL
int isAVL(struct Node* root) {
    if (root == NULL) {
        return 1;
    }
    int leftHeight = height(root->left);
    int rightHeight = height(root->right);
    if (abs(leftHeight - rightHeight) <= 1 && isAVL(root->left) && isAVL(root->right)) {
        return 1;
    }
    return 0;
}

// Function to perform a right rotation
struct Node* rightRotate(struct Node* y) {
    struct Node* x = y->left;
    struct Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    return x;
}

// Function to perform a left rotation
struct Node* leftRotate(struct Node* x) {
    struct Node* y = x->right;
    struct Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    return y;
}

// Function to determine which rotation case is required
struct Node* balanceTree(struct Node* root) {
    int balanceFactor = height(root->left) - height(root->right);
    if (balanceFactor > 1) {
        if (height(root->left->left) >= height(root->left->right)) {
            // Left-Left Case
            return rightRotate(root);
        } else {
            // Left-Right Case
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }
    }
    if (balanceFactor < -1) {
        if (height(root->right->right) >= height(root->right->left)) {
            // Right-Right Case
            return leftRotate(root);
        } else {
            // Right-Left Case
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }
    }
    return root;
}

// Function to insert a node into the BST
struct Node* insertNode(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else if (value > root->data) {
        root->right = insertNode(root->right, value);
    }
    return balanceTree(root);
}

int main() {
    struct Node* root = NULL;

    int choice, value;
    printf("1. Insert a node\n");
    printf("2. Check if the tree is balanced\n");
    printf("3. Check if the tree is AVL\n");
    printf("4. Exit\n");

    do {
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                root = insertNode(root, value);
                break;
            case 2:
                if (isBalanced(root)) {
                    printf("The tree is balanced.\n");
                } else {
                    printf("The tree is not balanced.\n");
                }
                break;
            case 3:
                if (isAVL(root)) {
                    printf("The tree is an AVL tree.\n");
                } else {
                    printf("The tree is not an AVL tree.\n");
                }
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid choice.\n");
        }
    } while (choice != 4);

    return 0;
}


*************6 Write C/C++ program for representation of graphs using adjacency matrix and  adjacency lists*******************

#include <stdio.h>
#include <stdlib.h>

// Define the maximum number of vertices
#define MAX_VERTICES 100

// Define a structure for a node in adjacency list
struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};

// Define a structure for an adjacency list
struct AdjList {
    struct AdjListNode* head;
};

// Define a structure for the graph
struct Graph {
    int numVertices;
    struct AdjList* array;
};

// Function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with 'V' vertices
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;

    // Create an array of adjacency lists
    graph->array = (struct AdjList*)malloc(numVertices * sizeof(struct AdjList));

    // Initialize each adjacency list as empty by making head as NULL
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest. A new node is added to the adjacency list of src
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to print the adjacency list representation of the graph
void printGraphAdjList(struct Graph* graph) {
    printf("Adjacency List Representation:\n");
    for (int v = 0; v < graph->numVertices; ++v) {
        struct AdjListNode* temp = graph->array[v].head;
        printf("Vertex %d: ", v);
        while (temp) {
            printf("%d -> ", temp->dest);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

// Function to print the adjacency matrix representation of the graph
void printGraphAdjMatrix(struct Graph* graph) {
    printf("Adjacency Matrix Representation:\n");
    for (int i = 0; i < graph->numVertices; ++i) {
        for (int j = 0; j < graph->numVertices; ++j) {
            int isConnected = 0;
            struct AdjListNode* temp = graph->array[i].head;
            while (temp) {
                if (temp->dest == j) {
                    isConnected = 1;
                    break;
                }
                temp = temp->next;
            }
            printf("%d ", isConnected);
        }
        printf("\n");
    }
}

int main() {
    int numVertices, numEdges;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);
    printf("Enter the number of edges in the graph: ");
    scanf("%d", &numEdges);

    struct Graph* graph = createGraph(numVertices);

    printf("Enter the edges (source destination):\n");
    for (int i = 0; i < numEdges; ++i) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    printGraphAdjList(graph);
    printGraphAdjMatrix(graph);

    return 0;
}

***********7 Write C/C++ program for graph traversals using BFS and DFS****************

#include <stdio.h>
#include <stdlib.h>

// Define the maximum number of vertices
#define MAX_VERTICES 100

// Define a structure for a node in adjacency list
struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};

// Define a structure for an adjacency list
struct AdjList {
    struct AdjListNode* head;
};

// Define a structure for the graph
struct Graph {
    int numVertices;
    struct AdjList* array;
};

// Function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with 'V' vertices
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;

    // Create an array of adjacency lists
    graph->array = (struct AdjList*)malloc(numVertices * sizeof(struct AdjList));

    // Initialize each adjacency list as empty by making head as NULL
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest. A new node is added to the adjacency list of src
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to perform Breadth-First Search (BFS) traversal of the graph
void BFS(struct Graph* graph, int startVertex) {
    // Create a boolean array to mark visited vertices
    int visited[MAX_VERTICES] = {0};

    // Create a queue for BFS
    int queue[MAX_VERTICES];
    int front = 0, rear = 0;

    // Mark the current node as visited and enqueue it
    visited[startVertex] = 1;
    queue[rear++] = startVertex;

    while (front < rear) {
        // Dequeue a vertex from the queue and print it
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

        // Get all adjacent vertices of the dequeued vertex
        // If an adjacent vertex has not been visited, mark it visited and enqueue it
        struct AdjListNode* temp = graph->array[currentVertex].head;
        while (temp) {
            int adjVertex = temp->dest;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                queue[rear++] = adjVertex;
            }
            temp = temp->next;
        }
    }
}

// Recursive function for Depth-First Search (DFS) traversal
void DFSUtil(struct Graph* graph, int vertex, int visited[]) {
    // Mark the current node as visited and print it
    visited[vertex] = 1;
    printf("%d ", vertex);

    // Recur for all the vertices adjacent to this vertex
    struct AdjListNode* temp = graph->array[vertex].head;
    while (temp) {
        int adjVertex = temp->dest;
        if (!visited[adjVertex]) {
            DFSUtil(graph, adjVertex, visited);
        }
        temp = temp->next;
    }
}

// Function to perform Depth-First Search (DFS) traversal of the graph
void DFS(struct Graph* graph, int startVertex) {
    // Create a boolean array to mark visited vertices
    int visited[MAX_VERTICES] = {0};

    // Call the recursive helper function to print DFS traversal
    DFSUtil(graph, startVertex, visited);
}

int main() {
    int numVertices, numEdges;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);
    printf("Enter the number of edges in the graph: ");
    scanf("%d", &numEdges);

    struct Graph* graph = createGraph(numVertices);

    printf("Enter the edges (source destination):\n");
    for (int i = 0; i < numEdges; ++i) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    printf("Breadth-First Search (BFS) traversal starting from vertex 0: ");
    BFS(graph, 0);
    printf("\n");

    printf("Depth-First Search (DFS) traversal starting from vertex 0: ");
    DFS(graph, 0);
    printf("\n");

    return 0;
}


**************8 Write C/C++ program to demonstrate Hashing using linear or quadratic probing*********************

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Define the size of the hash table
#define TABLE_SIZE 10

// Define a structure for a hash table entry
struct HashEntry {
    int key;
    int value;
    bool occupied;
};

// Define a structure for the hash table
struct HashTable {
    struct HashEntry* table[TABLE_SIZE];
};

// Function to create a new hash table entry
struct HashEntry* createHashEntry(int key, int value) {
    struct HashEntry* newEntry = (struct HashEntry*)malloc(sizeof(struct HashEntry));
    newEntry->key = key;
    newEntry->value = value;
    newEntry->occupied = true;
    return newEntry;
}

// Function to create a new hash table
struct HashTable* createHashTable() {
    struct HashTable* hashTable = (struct HashTable*)malloc(sizeof(struct HashTable));
    for (int i = 0; i < TABLE_SIZE; ++i) {
        hashTable->table[i] = NULL;
    }
    return hashTable;
}

// Function to compute the hash index
int hashCode(int key) {
    return key % TABLE_SIZE;
}

// Function to insert a key-value pair into the hash table using linear probing
void insert(struct HashTable* hashTable, int key, int value) {
    int index = hashCode(key);

    while (hashTable->table[index] != NULL && hashTable->table[index]->key != key) {
        index = (index + 1) % TABLE_SIZE;
    }

    if (hashTable->table[index] != NULL) {
        free(hashTable->table[index]);
    }

    hashTable->table[index] = createHashEntry(key, value);
}

// Function to lookup a key in the hash table
int search(struct HashTable* hashTable, int key) {
    int index = hashCode(key);

    while (hashTable->table[index] != NULL) {
        if (hashTable->table[index]->key == key) {
            return hashTable->table[index]->value;
        }
        index = (index + 1) % TABLE_SIZE;
    }

    return -1;
}

// Function to print the hash table
void display(struct HashTable* hashTable) {
    printf("Hash Table:\n");
    for (int i = 0; i < TABLE_SIZE; ++i) {
        if (hashTable->table[i] != NULL) {
            printf("Index %d: Key: %d, Value: %d\n", i, hashTable->table[i]->key, hashTable->table[i]->value);
        } else {
            printf("Index %d: NULL\n", i);
        }
    }
}

int main() {
    struct HashTable* hashTable = createHashTable();

    int choice;
    do {
        printf("\nHashing using Linear Probing:\n");
        printf("1. Insert a key-value pair\n");
        printf("2. Search for a key\n");
        printf("3. Display the hash table\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
                int key, value;
                printf("Enter key and value to insert: ");
                scanf("%d %d", &key, &value);
                insert(hashTable, key, value);
                break;
            }
            case 2: {
                int key;
                printf("Enter key to search: ");
                scanf("%d", &key);
                int result = search(hashTable, key);
                if (result != -1) {
                    printf("Value found: %d\n", result);
                } else {
                    printf("Value not found!\n");
                }
                break;
            }
            case 3:
                display(hashTable);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid choice.\n");
        }
    } while (choice != 4);

    // Free allocated memory
    for (int i = 0; i < TABLE_SIZE; ++i) {
        if (hashTable->table[i] != NULL) {
            free(hashTable->table[i]);
        }
    }
    free(hashTable);

    return 0;
}

************9 Write C/C++ program to implement Heap data structure. Create Max-heap and insert elements into it.**********

#include <stdio.h>
#include <stdlib.h>

// Define the maximum size of the heap
#define MAX_HEAP_SIZE 100

// Define the structure of the Max-Heap
struct MaxHeap {
    int* array;
    int size;
    int capacity;
};

// Function to create a new Max-Heap
struct MaxHeap* createMaxHeap(int capacity) {
    struct MaxHeap* maxHeap = (struct MaxHeap*)malloc(sizeof(struct MaxHeap));
    maxHeap->capacity = capacity;
    maxHeap->size = 0;
    maxHeap->array = (int*)malloc(capacity * sizeof(int));
    return maxHeap;
}

// Function to swap two integers
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to get the parent index of a node
int getParentIndex(int i) {
    return (i - 1) / 2;
}

// Function to get the left child index of a node
int getLeftChildIndex(int i) {
    return (2 * i) + 1;
}

// Function to get the right child index of a node
int getRightChildIndex(int i) {
    return (2 * i) + 2;
}

// Function to insert a new element into the Max-Heap
void insert(struct MaxHeap* maxHeap, int value) {
    if (maxHeap->size == maxHeap->capacity) {
        printf("Max-Heap is full. Cannot insert element.\n");
        return;
    }

    // Insert the new element at the end of the array
    int i = maxHeap->size;
    maxHeap->array[i] = value;
    maxHeap->size++;

    // Fix the Max-Heap property if violated
    while (i != 0 && maxHeap->array[getParentIndex(i)] < maxHeap->array[i]) {
        swap(&maxHeap->array[i], &maxHeap->array[getParentIndex(i)]);
        i = getParentIndex(i);
    }
}

// Function to print the Max-Heap
void printMaxHeap(struct MaxHeap* maxHeap) {
    printf("Max-Heap: ");
    for (int i = 0; i < maxHeap->size; ++i) {
        printf("%d ", maxHeap->array[i]);
    }
    printf("\n");
}

int main() {
    int capacity, numElements;
    printf("Enter the capacity of the Max-Heap: ");
    scanf("%d", &capacity);
    struct MaxHeap* maxHeap = createMaxHeap(capacity);

    printf("Enter the number of elements to insert into the Max-Heap: ");
    scanf("%d", &numElements);

    printf("Enter the elements:\n");
    for (int i = 0; i < numElements; ++i) {
        int value;
        scanf("%d", &value);
        insert(maxHeap, value);
    }

    printMaxHeap(maxHeap);

    // Free allocated memory
    free(maxHeap->array);
    free(maxHeap);

    return 0;
}

*********Dijkstra Algorithm************

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>

// Define the maximum number of vertices
#define MAX_VERTICES 100

// Function to find the vertex with the minimum distance value, from the set of vertices not yet included in shortest path tree
int minDistance(int distance[], bool shortestPathTreeSet[], int numVertices) {
    int min = INT_MAX, minIndex;

    for (int v = 0; v < numVertices; v++) {
        if (shortestPathTreeSet[v] == false && distance[v] <= min) {
            min = distance[v];
            minIndex = v;
        }
    }

    return minIndex;
}

// Function to print the constructed distance array
void printSolution(int distance[], int numVertices) {
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < numVertices; i++) {
        printf("%d \t\t %d\n", i, distance[i]);
    }
}

// Function to implement Dijkstra's algorithm
void dijkstra(int graph[MAX_VERTICES][MAX_VERTICES], int source, int numVertices) {
    int distance[numVertices]; // The output array. distance[i] will hold the shortest distance from source to i
    bool shortestPathTreeSet[numVertices]; // shortestPathTreeSet[i] will be true if vertex i is included in shortest path tree or shortest distance from source to i is finalized

    // Initialize all distances as INFINITE and shortestPathTreeSet[] as false
    for (int i = 0; i < numVertices; i++) {
        distance[i] = INT_MAX;
        shortestPathTreeSet[i] = false;
    }

    // Distance of source vertex from itself is always 0
    distance[source] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < numVertices - 1; count++) {
        // Pick the minimum distance vertex from the set of vertices not yet processed.
        // u is always equal to source in the first iteration.
        int u = minDistance(distance, shortestPathTreeSet, numVertices);

        // Mark the picked vertex as processed
        shortestPathTreeSet[u] = true;

        // Update distance value of the adjacent vertices of the picked vertex
        for (int v = 0; v < numVertices; v++) {
            // Update distance[v] only if is not in shortestPathTreeSet, there is an edge from u to v, and total weight of path from source to v through u is smaller than current value of distance[v]
            if (!shortestPathTreeSet[v] && graph[u][v] && distance[u] != INT_MAX && distance[u] + graph[u][v] < distance[v]) {
                distance[v] = distance[u] + graph[u][v];
            }
        }
    }

    // Print the constructed distance array
    printSolution(distance, numVertices);
}

int main() {
    int numVertices;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    int graph[MAX_VERTICES][MAX_VERTICES];

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int source;
    printf("Enter the source vertex: ");
    scanf("%d", &source);

    dijkstra(graph, source, numVertices);

    return 0;
}

`limits.h` is a header file in C that provides macros for defining various properties of integer types. 
For example, it defines macros like `INT_MAX`, `INT_MIN`, `UINT_MAX`, `SHRT_MAX`, `SHRT_MIN`, etc., 
which represent the maximum and minimum values that can be stored in different integer types like `int`, `unsigned int`, `short`, etc. 
These macros are useful for performing operations involving integer types in a portable manner, as the actual sizes of integer types may vary 
across different platforms.

`stdbool.h` is a header file in C that provides a boolean data type along with its possible values (`true` and `false`) and 
corresponding macros (`bool`, `true`, and `false`). It's used to define boolean variables and expressions in C programs. 
The `bool` data type can take only two values: `true` (which evaluates to an integer value of 1) and `false` (which evaluates to an integer value of 0). 
This header file is particularly useful for improving code readability and writing more expressive code by using boolean variables and expressions.


**********10 Write C or C++ program to create Binary search tree, insertion and searching and all deletion cases in BST******

#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node in the BST
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the BST
struct Node* insertNode(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else if (value > root->data) {
        root->right = insertNode(root->right, value);
    }
    return root;
}

// Function to perform inorder traversal of the BST
void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Function to search for a value in the BST
struct Node* search(struct Node* root, int value) {
    if (root == NULL || root->data == value) {
        return root;
    }
    if (value < root->data) {
        return search(root->left, value);
    }
    return search(root->right, value);
}

// Function to find the node with the minimum value in a subtree
struct Node* minValueNode(struct Node* node) {
    struct Node* current = node;
    while (current && current->left != NULL) {
        current = current->left;
    }
    return current;
}

// Function to delete a node from the BST
struct Node* deleteNode(struct Node* root, int value) {
    if (root == NULL) {
        return root;
    }
    if (value < root->data) {
        root->left = deleteNode(root->left, value);
    } else if (value > root->data) {
        root->right = deleteNode(root->right, value);
    } else {
        // Node with only one child or no child
        if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children: Get the inorder successor (smallest in the right subtree)
        struct Node* temp = minValueNode(root->right);

        // Copy the inorder successor's content to this node
        root->data = temp->data;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

int main() {
    struct Node* root = NULL;

    // Insertion
    int numElements;
    printf("Enter the number of elements to insert into the BST: ");
    scanf("%d", &numElements);
    printf("Enter the elements:\n");
    for (int i = 0; i < numElements; ++i) {
        int value;
        scanf("%d", &value);
        root = insertNode(root, value);
    }

    // Display BST after insertion
    printf("BST after insertion: ");
    inorderTraversal(root);
    printf("\n");

    // Searching
    int searchValue;
    printf("Enter the value to search in the BST: ");
    scanf("%d", &searchValue);
    struct Node* foundNode = search(root, searchValue);
    if (foundNode != NULL) {
        printf("%d found in the BST.\n", searchValue);
    } else {
        printf("%d not found in the BST.\n", searchValue);
    }

    // Deletion
    int deleteValue;
    printf("Enter the value to delete from the BST: ");
    scanf("%d", &deleteValue);
    root = deleteNode(root, deleteValue);

    // Display BST after deletion
    printf("BST after deletion: ");
    inorderTraversal(root);
    printf("\n");

    // Free allocated memory
    // (Note: Memory deallocation is not shown for simplicity in this example)
    return 0;
}
